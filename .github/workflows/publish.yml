name: Publish Clients

on:
  release:
    types: [created]

jobs:
  publish-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Run tests
        working-directory: clients/go/ekodb
        run: go test -v ./...
        
      - name: Publish to pkg.go.dev
        working-directory: clients/go/ekodb
        run: echo "Publishing to pkg.go.dev - Skipped"
        # run: GOPROXY=proxy.golang.org go list -m github.com/${{ github.repository }}/clients/go/ekodb@${{ github.ref }}

  publish-nodejs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        working-directory: clients/nodejs
        run: npm ci
        
      - name: Run tests
        working-directory: clients/nodejs
        run: npm test
        
      - name: Build
        working-directory: clients/nodejs
        run: npm run build
        
      - name: Publish to NPM
        working-directory: clients/nodejs
        run: echo "Publishing to NPM - Skipped"
        # run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        working-directory: clients/python
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Run tests
        working-directory: clients/python
        run: pip install -e ".[dev]" && pytest
        
      - name: Build package
        working-directory: clients/python
        run: python -m build
        
      - name: Publish to PyPI
        working-directory: clients/python
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: echo "Publishing to PyPI - Skipped"
        # run: twine upload dist/*
